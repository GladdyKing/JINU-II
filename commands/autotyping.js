const fs = require('fs');
const path = require('path');

const configPath = path.join(__dirname, '..', 'data', 'autotyping.json');

// üßæ …™…¥…™·¥õ…™·¥Ä ü…™·¥¢·¥á ·¥Ñ·¥è…¥“ì…™…¢
function initConfig() {
    if (!fs.existsSync(configPath)) {
        fs.writeFileSync(configPath, JSON.stringify({ enabled: false}, null, 2));
}
    return JSON.parse(fs.readFileSync(configPath));
}

// üì° ·¥Ä·¥ú·¥õ·¥è·¥õ è·¥ò…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö
async function autotypingCommand(sock, chatId, message) {
    try {
        if (!message.key.fromMe) {
            await sock.sendMessage(chatId, {
                text:
`‚ï≠‚îÄ‚îÄ„Äî ‚ùå ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥Ö·¥á…¥…™·¥á·¥Ö „Äï‚îÄ‚îÄ
‚îÇ
‚îú‚îÄ *·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*
‚îÇ
‚ï∞‚îÄ‚îÄ„Äî ‚öôÔ∏è ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ä…™…¥·¥ú-…™…™ „Äï‚îÄ‚îÄ`,
                contextInfo: {
                    forwardingScore: 1,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363422020175323@newsletter.whatsapp.net',
                        newsletterName: '·¥ä…™…¥·¥ú-…™…™',
                        serverMessageId: -1
}
}
});
            return;
}

        const args = message.message?.conversation?.trim().split(' ').slice(1) ||
                     message.message?.extendedTextMessage?.text?.trim().split(' ').slice(1) || [];

        const config = initConfig();

        if (args.length> 0) {
            const action = args[0].toLowerCase();
            if (action === 'on' || action === 'enable') {
                config.enabled = true;
} else if (action === 'off' || action === 'disable') {
                config.enabled = false;
} else {
                await sock.sendMessage(chatId, {
                    text:
`‚ï≠‚îÄ‚îÄ„Äî ‚ö†Ô∏è …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥ „Äï‚îÄ‚îÄ
‚îÇ
‚îú‚îÄ ·¥ús·¥á: *.autotyping on* / *.autotyping off*
‚îÇ
‚ï∞‚îÄ‚îÄ„Äî ‚öôÔ∏è ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ä…™…¥·¥ú-…™…™ „Äï‚îÄ‚îÄ`,
                    contextInfo: {
                        forwardingScore: 1,
                        isForwarded: true,
                        forwardedNewsletterMessageInfo: {
                            newsletterJid: '120363422020175323@newsletter.whatsapp.net',
                            newsletterName: '·¥ä…™…¥·¥ú-…™…™',
                            serverMessageId: -1
}
}
});
                return;
}
} else {
            config.enabled =!config.enabled;
}

        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));

        await sock.sendMessage(chatId, {
            text:
`‚ï≠‚îÄ‚îÄ„Äî ‚úÖ ·¥Ä·¥ú·¥õ·¥è·¥õ è·¥ò…™…¥…¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á „Äï‚îÄ‚îÄ
‚îÇ
‚îú‚îÄ Íú±·¥õ·¥Ä·¥õ·¥úÍú±: ${config.enabled? '·¥á…¥·¥Ä ô ü·¥á·¥Ö ‚úÖ': '·¥Ö…™s·¥Ä ô ü·¥á·¥Ö ‚ùå'}
‚îÇ
‚ï∞‚îÄ‚îÄ„Äî ‚öôÔ∏è ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ä…™…¥·¥ú-…™…™ „Äï‚îÄ‚îÄ`,
            contextInfo: {
                forwardingScore: 1,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '120363422020175323@newsletter.whatsapp.net',
                    newsletterName: '·¥ä…™…¥·¥ú-…™…™',
                    serverMessageId: -1
}
}
});

} catch (error) {
        console.error('‚ùå Error in autotyping command:', error);
        await sock.sendMessage(chatId, {
            text:
`‚ï≠‚îÄ‚îÄ„Äî ‚ö†Ô∏è ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö „Äï‚îÄ‚îÄ
‚îÇ
‚îú‚îÄ ${error.message}
‚îÇ
‚ï∞‚îÄ‚îÄ„Äî ‚öôÔ∏è ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ä…™…¥·¥ú-…™…™ „Äï‚îÄ‚îÄ`,
            contextInfo: {
                forwardingScore: 1,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '120363422020175323@newsletter.whatsapp.net',
                    newsletterName: '·¥ä…™…¥·¥ú-…™…™',
                    serverMessageId: -1
}
}
});
}
}

// üîç ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥ú·¥õ·¥è·¥õ è·¥ò…™…¥…¢ s·¥õ·¥Ä·¥õ·¥ús
function isAutotypingEnabled() {
    try {
        const config = initConfig();
return config.enabled;
} catch (error) {
        console.error('‚ùå Error checking autotyping status:', error);
        return false;
}
}

// üëÅÔ∏è  ú·¥Ä…¥·¥Ö ü·¥á ·¥õ è·¥ò…™…¥…¢ “ì·¥è Ä ·¥ç·¥áss·¥Ä…¢·¥ás
async function handleAutotypingForMessage(sock, chatId, userMessage) {
    if (isAutotypingEnabled()) {
        try {
            await sock.presenceSubscribe(chatId);
            await sock.sendPresenceUpdate('available', chatId);
            await new Promise(resolve => setTimeout(resolve, 500));
            await sock.sendPresenceUpdate('composing', chatId);

            const typingDelay = Math.max(3000, Math.min(8000, userMessage.length * 150));
            await new Promise(resolve => setTimeout(resolve, typingDelay));

            await sock.sendPresenceUpdate('composing', chatId);
            await new Promise(resolve => setTimeout(resolve, 1500));
            await sock.sendPresenceUpdate('paused', chatId);

            return true;
} catch (error) {
            console.error('‚ùå Error sending typing indicator:', error);
            return false;
}
}
    return false;
}

// ‚è≥  ô·¥á“ì·¥è Ä·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥áx·¥á·¥Ñ·¥ú·¥õ…™·¥è…¥
async function handleAutotypingForCommand(sock, chatId) {
    if (isAutotypingEnabled()) {
        try {
            await sock.presenceSubscribe(chatId);
            await sock.sendPresenceUpdate('available', chatId);
            await new Promise(resolve => setTimeout(resolve, 500));
            await sock.sendPresenceUpdate('composing', chatId);
            await new Promise(resolve => setTimeout(resolve, 3000));
            await sock.sendPresenceUpdate('composing', chatId);
            await new Promise(resolve => setTimeout(resolve, 1500));
            await sock.sendPresenceUpdate('paused', chatId);

            return true;
} catch (error) {
            console.error('‚ùå Error sending command typing indicator:', error);
            return false;
}
}
    return false;
}

// üïí ·¥Ä“ì·¥õ·¥á Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥áx·¥á·¥Ñ·¥ú·¥õ…™·¥è…¥
async function showTypingAfterCommand(sock, chatId) {
    if (isAutotypingEnabled()) {
        try {
            await sock.presenceSubscribe(chatId);
            await sock.sendPresenceUpdate('composing', chatId);
            await new Promise(resolve => setTimeout(resolve, 1000));
            await sock.sendPresenceUpdate('paused', chatId);

            return true;
} catch (error) {
            console.error('‚ùå Error sending post-command typing indicator:', error);
            return false;
}
}
    return false;
}

module.exports = {
    autotypingCommand,
    isAutotypingEnabled,
    handleAutotypingForMessage,
    handleAutotypingForCommand,
    showTypingAfterCommand
};
